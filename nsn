void insertList(int x, int p, List *pL){
    if (p >= 1 && p <= pL->Last + 1){
        for (int i= pL->Last; i>= p ; i--){
            pL->Elements[i] = pL->Elements[i - 1];
        }
        pL->Elements[p - 1] = x;
        pL->Last++;
    }
    
}

void readSet(List *pL)
{
    makenullList(pL);
    int n;
    scanf("%d",&n);
    for(int i=0; i<n; i++)
    {
        scanf("%d",&pL->Elements[i]);
        if(!member(pL->Elements[i],*pL))
        {
            insertSet(pL->Elements[i],pL);
        }
    }
}

void unionSet(List L1, List L2, List *pL)
{
    makenullList(pL);
    for (int i=0; i<L1.Last; i++)
    {
        insertSet(L1.Elements[i],pL);
    }
    for(int i=0; i<L2.Last; i++)
    {
        if(!member(L2.Elements[i],*pL))
            insertSet(L2.Elements[i],pL);
    }
}

void printOddNumbers(List L)
{
    for (int i = 0; i < L.Last; i++)
    {
        if (L.Elements[i] % 2 != 0)
            printf("%d ", L.Elements[i]);
    }
}

int locate1(int x, List L) {
    for (int i = L.Last - 1; i >= 0; i--) { 
        if (L.Elements[i] == x) {
            return i + 1; 
        }
    }
    return L.Last + 1; 
}

float getAvg(List L)
{
    float s=0;
    for (int i=0; i<L.Last; i++)
    {
        s+=L.Elements[i];
    }
    if(L.Last==0)
        return -10000;
    return s/L.Last;
}

void removeAll(ElementType X, List *pL)
{
    while(locate(X,*pL)!=pL->Last+1)
    {
        int P=locate(X,*pL);
        deleteList(P, pL);
    }
}

int member(ElementType x, List L)
{
    for(int i = 0 ; i<L.Last;i++)
    {
        if(L.Elements[i]==x)
        {return 1;}
    }
    return 0;
}

void erase(int x, List *pL)
{
    deleteList(locate(x,*pL),pL);
}

void insertSet(int x, List *pL)
{
    pL->Elements[pL->Last]=x;
    pL->Last++;
}

int locate(int x, List L)
{
    int p=0;
    for(int i=0; i<L.Last; i++)
    {
        if(L.Elements[i]==x)
            return p=i+1;
    }
    return p=L.Last+1;
}

void copyEvenNumbers(List L1, List *L2)
{
    makenullList(L2);
    for(int i=0; i<L1.Last; i++)
    {
        if(L1.Elements[i]%2==0)
            insertList(L1.Elements[i],L2->Last+1,L2);
    }
}

void printList(List L){
	for(int i=0;i<L.Last;i++){
		printf("%d ",L.Elements[i]);
	}
	printf("\n");
}

void sort(List *pL)
{   
    int s;
    for(int i=0; i<pL->Last; i++)
    {
        for(int z=i+1;z<pL->Last;z++)
        {
            if(pL->Elements[i]>pL->Elements[z])
                {
                s = pL->Elements[z];
                pL->Elements[z]=pL->Elements[i];
                pL->Elements[i]=s;
                }
        }
    }
}

void normalize(List *L)
{
    Position a, b;
    a = 1;
    while (a != L->Last + 1)
    {
        b = a + 1;
        while (b != L->Last + 1)
        {
            if (L->Elements[a - 1] == L->Elements[b - 1])
                {deleteList(b, L);}
            else
                {b++;}
        }
        a++;
    }
}

void intersection(List L1, List L2, List *pL)
{
    makenullList(pL);
    for (int i=0; i<L1.Last; i++)
    {
        if(member(L1.Elements[i],L2))
            insertSet(L1.Elements[i],pL);
    }
}

void deleteList(int p, List *pL)
{
    if(p<1||p>pL->Last)
        printf("Vi tri khong hop le \n");
    else 
        {
            for(int i=p-1; i<pL->Last; i++)
            {
                pL->Elements[i]=pL->Elements[i+1];
            }
            pL->Last--;
        }
}

void difference(List L1, List L2, List *pL) {
    makenullList(pL); // Khởi tạo danh sách kết quả rỗng

    for (int i = 0; i < L1.Last; i++) { // Duyệt qua tất cả các phần tử của L1
        if (!member(L1.Elements[i], L2)) { // Nếu phần tử không thuộc L2
            insertSet(L1.Elements[i], pL); // Thêm vào danh sách kết quả
        }
    }
}

void readList(List *pL)
{
    makenullList(pL);
    int n;
    scanf("%d",&n);
    for (int i=0; i<n; i++)
    {
        scanf("%d",&pL->Elements[i]);
        insertList(pL->Elements[i],i+1,pL);
    }   
}

void makenullList(List *pL)
{
    pL->Last=0;
}

float getAvg(List L)
{
    float s=0;
    for (int i=0; i<L.Last; i++)
    {
        s+=L.Elements[i];
    }
    if(L.Last==0)
        return -10000;
    return s/L.Last;
}


#include <stdio.h>
#include <string.h>
// Định nghĩa cấu trúc SinhVien
typedef struct {
    char MSSV[10];
    char HoTen[50];
    float DiemLT;
    float DiemTH1;
    float DiemTH2;
} SinhVien;

// Định nghĩa cấu trúc DanhSach
typedef struct {
    SinhVien A[40]; // Mảng chứa tối đa 40 sinh viên
    int n;          // Số lượng sinh viên trong danh sách
} DanhSach;

// Hàm nhập danh sách sinh viên
void nhapDanhSach(DanhSach *L) {
    scanf("%d", &(L->n));
    for (int i = 0; i < L->n; i++) {
 

        scanf("%s", L->A[i].MSSV);
        getchar();

        fgets(L->A[i].HoTen, sizeof(L->A[i].HoTen), stdin); // Nhập họ và tên

        size_t len = strlen(L->A[i].HoTen);
        if (len > 0 && L->A[i].HoTen[len - 1] == '\n') {
            L->A[i].HoTen[len - 1] = '\0';
        }
        scanf("%f %f %f", &L->A[i].DiemLT, &L->A[i].DiemTH1, &L->A[i].DiemTH2); // Nhập điểm
    }
}

// Hàm hiển thị danh sách sinh viên
void hienThiDanhSach(DanhSach L) {
    for (int i = 0; i < L.n; i++) {
        printf("%s - %s - %.2f - %.2f - %.2f\n", 
               L.A[i].MSSV, 
               L.A[i].HoTen, 
               L.A[i].DiemLT, 
               L.A[i].DiemTH1, 
               L.A[i].DiemTH2);
    }
}
int main() {
    DanhSach L;

    nhapDanhSach(&L);
    hienThiDanhSach(L);

    return 0;
}


void hienthi(NganXep *pS){
	while ( pS->Dinh!=SoPhanTu ){
		printf("%d ", pS->DuLieu[pS->Dinh]);
		xoa(pS);
	}
}

int giatriDinh(NganXep S){
    return S.DuLieu[S.Dinh];
    
}

void inThaplucphan(int n) {
    Stack S;
    makenullStack(&S);
    while (n>0) {
    int du = n% 16;
    char c = du <= 9 ? '0' + du : 'A' + du - 10;
    push(c,&S);
        n /= 16;
    }
    while (!emptyStack(S)) {
        printf("%c", top(S));
        pop(&S);
    }
}

int ktRong(NganXep S){
    return S.Dinh==SoPhanTu;
}

void chuyenHauto(char trungto[], char hauto[]) {
    Stack S;
    makenullStack(&S);
    int i, k = 0;
    char c;

    for (i = 0; i < strlen(trungto); i++) {
        c = trungto[i];

        if (isalnum(c)) {
            hauto[k++] = c;
        } else if (c == '(') {
            push(c, &S);
        } else if (c == ')') {
            while (!emptyStack(S) && top(S) != '(') {
                hauto[k++] = top(S);
                pop(&S);
            }
            pop(&S); // Loại bỏ dấu '(' khỏi ngăn xếp
        } else if (c == '+' || c == '-' || c == '*' || c == '/') {
            while (!emptyStack(S) && top(S) != '(' && mucUutien(c) <= mucUutien(top(S))) {
                hauto[k++] = top(S);
                pop(&S);
            }
            push(c, &S);
        }
    }

    while (!emptyStack(S)) {
        hauto[k++] = top(S);
        pop(&S);
    }

    hauto[k] = '\0'; // Kết thúc chuỗi hậu tố
}

int ktDay(NganXep S){
	return S.Dinh==0;
}

void doiNhiPhan(int n, NganXep *pS) {
    khoitao(pS);
    while (n > 0) {
        
        them(n%2, pS);
        n /= 2;
    }
}

void khoitao(NganXep *pS){
	pS->Dinh=SoPhanTu;
}

void them (int x,NganXep *pS){
	if ( pS->Dinh!=0 ){
		pS->Dinh--;
		pS->DuLieu[pS->Dinh]=x;
	}
}

Cau khoitao(){
    Cau L = (struct Node*)malloc(sizeof(struct Node));
     L->Next = NULL;
     return L;    
}

void chenKyTu(char c, Cau* pD) {
    Cau newNode = (Cau)malloc(sizeof(struct Node));
    newNode->KyTu = c;
    newNode->Next = NULL;

    if (*pD == NULL) {
        *pD = newNode;
    } else {
        Cau temp = *pD;
        while (temp->Next != NULL) {
            temp = temp->Next;
        }
        temp->Next = newNode;
    }
}

int demHoa(Cau d) {
    int count = 0; 
    Cau temp = d;  

    while (temp != NULL) {
        if (temp->KyTu >= 'A' && temp->KyTu <= 'Z') {
            count++; 
        }
        temp = temp->Next; 
    }
    return count; 
}

int sotu(Cau d) {
    int count = 0; 
    int inWord = 0; 
    Cau temp = d; 
    while (temp != NULL) {
        if (temp->KyTu != ' ') {
            
            if (inWord == 0) {
                count++;
                inWord = 1; 
            }
        } else {
            inWord = 0;
        }
        temp = temp->Next;
    }

    return count;
}


Cau nhapCau() {
    char chuoi[1000];
    Cau d = khoitao(NULL); 

    fgets(chuoi, sizeof(chuoi), stdin); 

    for (int i = 0; chuoi[i] != '\0'; i++) {
        if (chuoi[i] != '\n') {chenKyTu(chuoi[i], &d); 
        }
    }

    return d;
}
