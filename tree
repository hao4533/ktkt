
Tree leftRotate(Tree T) {
Tree y = T->right;
Tree z = y->left;
   y->left = T;
T->right = z;
T->height = max(height(T->left), height(T->right)) + 1;
y->height = max(height(y->left), height(y->right)) + 1;
return y;}

Tree deleteNode(Tree T, int key) {
    if (T == NULL)
        return T;

    if (key < T->key)
        T->left = deleteNode(T->left, key);
    else if (key > T->key)
        T->right = deleteNode(T->right, key);
    else {
        if ((T->left == NULL) || (T->right == NULL)) {
            Tree temp = T->left ? T->left : T->right;

            if (temp == NULL) {
                temp = T;
                T = NULL;
            } else {
                *T = *temp;
            }
            free(temp);
        } else {
            Tree temp = T->right;
            while (temp->left != NULL)
                temp = temp->left;

            T->key = temp->key;
            T->right = deleteNode(T->right, temp->key);
        }
    }

    if (T == NULL)
        return T;

    T->height = 1 + (height(T->left) > height(T->right) ? height(T->left) : height(T->right));

    int balance = getBalance(T);

    if (balance > 1 && getBalance(T->left) >= 0)
        return rightRotate(T);

    if (balance > 1 && getBalance(T->left) < 0) {
        T->left = leftRotate(T->left);
        return rightRotate(T);
    }

    if (balance < -1 && getBalance(T->right) <= 0)
        return leftRotate(T);

    if (balance < -1 && getBalance(T->right) > 0) {
        T->right = rightRotate(T->right);
        return leftRotate(T);
    }

    return T;
}


void printPosOrder(Tree T) {
    if (T != NULL) {
        printPosOrder(T->left);    // Duyệt cây con bên trái
        printPosOrder(T->right);   // Duyệt cây con bên phải
        printf("%d ", T->key);     // In giá trị nút gốc
    }
}

int height(Tree N) {
    if (N == NULL) {        // Nếu nút là NULL, chiều cao là 0
        return 0;
    }
    return N->height;       // Nếu không, trả về giá trị chiều cao đã lưu trong nút
}


struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;    
};
typedef struct Node* Tree;

void printInOrder(Tree T) {
    if (T != NULL) {
        printInOrder(T->left);
        printf("%d ", T->key);
        printInOrder(T->right);
        }
}

void printPreOrder(Tree T) {
    if (T != NULL) {
        printf("%d ", T->key);
        printPreOrder(T->left);
        printPreOrder(T->right);
        }
}

Tree rightRotate(Tree T) {
    Tree x = T->left;
    Tree z = x->right;
    x->right = T;
    T->left = z;
    T->height = max(height(T->left), height(T->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

int getBalance(Tree T) {
    if (T == NULL) {
        return 0;
        }
        return height(T->left) - height(T->right);
    
}

Tree insertNode(Tree T, int key) {
    if (T == NULL) {
        Tree newNode = (Tree)malloc(sizeof(struct Node));
        newNode->key = key;
        newNode->left = NULL;
        newNode->right = NULL;
        newNode->height = 1;
        return newNode;
        }
        if (key < T->key) {
            T->left = insertNode(T->left, key);
            } else if (key > T->key) {
                T->right = insertNode(T->right, key);
                } else {
                    return T;
                    }
    T->height = 1 + max(height(T->left), height(T->right));
    int balance = getBalance(T);
    if (balance > 1 && key < T->left->key) {
    return rightRotate(T);
 }
    if (balance < -1 && key > T->right->key) {
    return leftRotate(T);
}
    if (balance > 1 && key > T->left->key) {
     T->left = leftRotate(T->left);
  return rightRotate(T);
    }
                                if (balance < -1 && key < T->right->key) {
                                    T->right = rightRotate(T->right);
                                    return leftRotate(T);
                                    }
                                    return T;
                                    
}
